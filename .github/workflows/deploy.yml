name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Write JWT keys
      run: |
        mkdir -p keys
        echo "${{ secrets.PRIVATE_KEY_PEM }}" > keys/private.pem
        echo "${{ secrets.PUBLIC_KEY_PEM }}" > keys/public.pem

    - name: Build and start services for testing
      run: docker compose --profile dev up -d --build

    - name: Run tests
      run: docker compose --profile dev exec -T app npm test

    - name: Stop services
      run: docker compose --profile dev down

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: rokdev01/mmr-delivery-api:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Copy docker-compose.yml to VPS
      run: |
        scp -P 49542 -o StrictHostKeyChecking=no docker-compose.yml deploy@135.125.235.169:/home/deploy/docker-compose.yml

    - name: Deploy to VPS
      run: |
            ssh -p 49542 -o StrictHostKeyChecking=no deploy@135.125.235.169 << EOF
            # Login to Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u rokdev01 --password-stdin

            # Export environment variables
            export NODE_ENV="production"
            export EMAIL_USER="${{ secrets.EMAIL_USER }}"
            export EMAIL_PASSWORD="${{ secrets.EMAIL_PASSWORD }}"
            
            # Create keys with readable permissions
            mkdir -p /home/deploy/keys
            echo "${{ secrets.PRIVATE_KEY_PEM }}" > /home/deploy/keys/private.pem
            echo "${{ secrets.PUBLIC_KEY_PEM }}" > /home/deploy/keys/public.pem
                  
            # Navigate to the deployment directory
            cd /home/deploy
            
            # Pull the latest images
            docker compose --profile prod pull
            
            # Stop and remove existing containers
            docker compose --profile prod down || true
            
            # Start all services using docker-compose
            docker compose --profile prod up -d
            EOF
