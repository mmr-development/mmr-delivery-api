name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Write JWT keys
      run: |
        mkdir -p keys
        echo "${{ secrets.PRIVATE_KEY_PEM }}" > keys/private.pem
        echo "${{ secrets.PUBLIC_KEY_PEM }}" > keys/public.pem

    - name: Build and start services for testing
      run: docker compose up -d --build

    - name: Wait for Postgres to be ready
      run: |
        until docker exec $(docker compose ps -q postgres) pg_isready -U postgres; do
          sleep 1
        done

    - name: Run tests
      run: docker compose exec -T app npm test

    - name: Show app logs if tests fail
      if: failure()
      run: docker compose logs app

    - name: Stop services
      run: docker compose down

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: rokdev01/mmr-delivery-api:latest

    - name: Build Docker Image
      run: docker build . --file Dockerfile --tag my-image-name:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Copy docker-compose.yml to VPS
      run: |
        scp -P 49542 -o StrictHostKeyChecking=no docker-compose.yml deploy@135.125.235.169:/home/deploy/docker-compose.yml

    - name: Deploy to VPS
      run: |
            ssh -p 49542 -o StrictHostKeyChecking=no deploy@135.125.235.169 << 'EOF'
            # Login to Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u rokdev01 --password-stdin
                
            # Pull the latest image
            docker pull rokdev01/mmr-delivery-api:latest
            
            # Create required directories
            mkdir -p /home/deploy/data/postgres /home/deploy/data/redis /home/deploy/keys
            
            # Write key files
            echo "${{ secrets.PRIVATE_KEY_PEM }}" > /home/deploy/keys/private.pem
            echo "${{ secrets.PUBLIC_KEY_PEM }}" > /home/deploy/keys/public.pem
            
            # Create a .env file for docker-compose
            cat > /home/deploy/.env << 'ENVFILE'
            DB_HOST=postgres
            DB_PORT=${{ secrets.PROD_DB_PORT }}
            DB_USER=${{ secrets.PROD_DB_USER }}
            DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
            DB_NAME=${{ secrets.PROD_DB_NAME }}
            REDIS_HOST=redis
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            NODE_ENV=production
            EMAIL_HOST=smtp.gmail.com
            EMAIL_PORT=465
            EMAIL_SECURE=false
            EMAIL_USER=mmrdevelopmentteam@gmail.com
            EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
            EMAIL_FROM="MMR Delivery"
            APP_URL=http://localhost:8080
            ENVFILE
            
            # Stop any running containers
            cd /home/deploy
            docker-compose down || true
            
            # Start all services with the custom image
            docker-compose up -d --no-build
            
            # Check if containers are running
            docker-compose ps
            EOF
