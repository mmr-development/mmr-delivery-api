name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Write JWT keys
      run: |
        mkdir -p keys
        echo "${{ secrets.PRIVATE_KEY_PEM }}" > keys/private.pem
        echo "${{ secrets.PUBLIC_KEY_PEM }}" > keys/public.pem

    - name: Build and start services for testing
      run: docker compose up -d --build

    - name: Run tests
      run: docker compose exec -T app npm test

    - name: Stop services
      run: docker compose down

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: rokdev01/mmr-delivery-api:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Copy docker-compose.yml to VPS
      run: |
        scp -P 49542 -o StrictHostKeyChecking=no docker-compose.yml deploy@135.125.235.169:/home/deploy/docker-compose.yml

    - name: Deploy to VPS
      run: |
            ssh -p 49542 -o StrictHostKeyChecking=no deploy@135.125.235.169 << 'EOF'
            # Login to Docker Hub
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u rokdev01 --password-stdin
                
            # Pull the latest image
            docker pull rokdev01/mmr-delivery-api:latest

            # Stop and remove the existing container if it exists
            docker stop mmr-delivery-api || true
            docker rm mmr-delivery-api || true
            
            # Run container with host machine's DB and Redis
            docker run -d --name mmr-delivery-api \
              -p 8080:8080 \
              -e NODE_ENV="production" \
              -e DB_HOST="${{ secrets.PROD_DB_HOST }}" \
              -e DB_PORT="${{ secrets.PROD_DB_PORT }}" \
              -e DB_USER="${{ secrets.PROD_DB_USER }}" \
              -e DB_PASSWORD="${{ secrets.PROD_DB_PASSWORD }}" \
              -e DB_NAME="${{ secrets.PROD_DB_NAME }}" \
              -e REDIS_HOST="${{ secrets.REDIS_HOST }}" \
              -e REDIS_PORT="${{ secrets.REDIS_PORT }}" \
              -e REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}" \
              -e EMAIL_HOST=smtp.gmail.com \
              -e EMAIL_PORT=465 \
              -e EMAIL_SECURE=false \
              -e EMAIL_USER=mmrdevelopmentteam@gmail.com \
              -e EMAIL_PASSWORD="${{ secrets.EMAIL_PASSWORD }}" \
              -e EMAIL_FROM="MMR Delivery" \
              -e APP_URL=http://localhost:8080 \
              -v /home/deploy/keys:/app/keys \
              --restart unless-stopped \
              rokdev01/mmr-delivery-api:latest
            EOF
