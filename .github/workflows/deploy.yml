name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Write JWT keys
      run: |
        mkdir -p keys
        echo "${{ secrets.PRIVATE_KEY_PEM }}" > keys/private.pem
        echo "${{ secrets.PUBLIC_KEY_PEM }}" > keys/public.pem

    - name: Build and start services for testing
      run: docker compose up -d --build

    - name: Wait for Postgres to be ready
      run: |
        until docker exec $(docker compose ps -q postgres) pg_isready -U postgres; do
          sleep 1
        done

    - name: Run tests
      run: docker compose exec -T app npm test

    - name: Show app logs if tests fail
      if: failure()
      run: docker compose logs app

    - name: Stop services
      run: docker compose down

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: rokdev01/mmr-delivery-api:latest

    - name: Build Docker Image
      run: docker build . --file Dockerfile --tag my-image-name:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to VPS
      run: |
              ssh -p 49542 -o StrictHostKeyChecking=no deploy@135.125.235.169 << 'EOF'
              # Login to Docker Hub
              echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u rokdev01 --password-stdin
              
              # Pull the image
              docker pull rokdev01/mmr-delivery-api:latest
              
              # Stop and remove existing container
              docker stop mmr-delivery-api || true
              docker rm mmr-delivery-api || true
              
              # Create keys directory and write keys
              mkdir -p /home/deploy/keys
              echo "${{ secrets.PRIVATE_KEY_PEM }}" > /home/deploy/keys/private.pem
              echo "${{ secrets.PUBLIC_KEY_PEM }}" > /home/deploy/keys/public.pem
              
              # Run container with host machine's DB and Redis
              docker run -d --name mmr-delivery-api \
                -p 80:8080 \
                -e NODE_ENV="production" \
                -e DB_HOST="${{ secrets.PROD_DB_HOST }}" \
                -e DB_PORT="${{ secrets.PROD_DB_PORT }}" \
                -e DB_USER="${{ secrets.PROD_DB_USER }}" \
                -e DB_PASSWORD="${{ secrets.PROD_DB_PASSWORD }}" \
                -e DB_NAME="${{ secrets.PROD_DB_NAME }}" \
                -e REDIS_HOST="${{ secrets.REDIS_HOST }}" \
                -e REDIS_PORT="${{ secrets.REDIS_PORT }}" \
                -v /home/deploy/keys:/app/keys \
                --restart unless-stopped \
                rokdev01/mmr-delivery-api:latest
              
              # Check if container is running
              docker ps | grep mmr-delivery-api || echo "WARNING: Container failed to start"
              
              # Show logs if container exists but isn't running
              docker ps -a | grep -q mmr-delivery-api && docker logs mmr-delivery-api
              EOF
