services:
  app:
    profiles: ["dev"]
    build: .
    environment:
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-mmr_delivery}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      HOST: 0.0.0.0
      PORT: 8080
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - ./public:/app/public
    command: npm start
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  app-production:
    profiles: ["prod"]
    image: rokdev01/mmr-delivery-api:latest
    pull_policy: always
    environment:
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-mmr_delivery}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      NODE_ENV: ${NODE_ENV:-production}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      HOST: 0.0.0.0
      PORT: 8080
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - ./public:/app/public
      - /home/deploy/keys:/app/keys
    command: npm start
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mmr_delivery
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    image: redis:7
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
  
volumes:
  postgres-data:
  redis-data:
